<!-- Module User's Guide -->

<chapter>
	
	<title>&adminguide;</title>
	
	<section>
	<title>Overview</title>
	<para>
		The module adds a hash table container to configuration language. The
		hash table is stored in shared memory and the access to it can be
		done via pseudo-variables: $sht(name).
	</para>
	<para>
		The <quote>name</quote> can be a static string or can include pseudo-
		variables that will be replaced at runtime.
	</para>
	<example>
	<title>Accessing $sht(name)</title>
	<programlisting format="linespecific">
...
$sht(test) = 1;
$sht($ci::srcip) = $si;
...
</programlisting>
	</example>
	<para>
		Next example shows a way to protect against dictionary attacks. If
		someone fails to authenticate 3 times, it is forbidden for 15min.
		Authenticatin against database is expensive as it does a select
		on subscriber table. By disabling the DB auth for 15min, resources
		on server as saved and time to discover the password is increased
		substantially. Additional alerting can be done by writing a message
		to syslog or sending email, etc.
	</para>
	<para>
		To implement the logic, two hash table variables are user: one counting
		the failed authentications per user and one for storing the time of 
		last authentication attempt. To ensure unique name per user, the
		hash table uses a combination of authentication username and text
		<quote>::auth_count</quote> and <quote>::last_auth</quote>.
	</para>
	<example>
	<title>Dictionary attack limitation</title>
	<programlisting format="linespecific">
...
if(is_present_hf("Authorization"))
{
	if($sht($au::auth_count)==3)
	{
		if($sht($au::last_auth) &gt; $Ts-900)
		{
			sl_send_reply("403", "Try later");
			exit;
		} else {
			$sht($au::auth_count) = 0;
		}
	}
	if(!www_authorize(""))
	{
		if($sht($au::auth_count) == null)
			$sht($au::auth_count) = 0;
		$sht($au::auth_count) = $sht($au::auth_count) + 1;
		if($sht($au::auth_count) == 3)
			xlog("auth failed 3rd time - src ip: $si\n");
		$sht($au::last_auth) = $Ts;
		www_challenge(""/*realm*/,"0"/*qop*/);
		exit;
	}
	$sht($au::auth_count) = 0;
} else {
	www_challenge("","0");
	exit;
}
...
</programlisting>
	</example>

	</section>
	<section>
	<title>Dependencies</title>
	<section>
		<title>&kamailio; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>No dependencies on other &kamailio; modules</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before running
		&kamailio; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>Loading from database</title>
		<para>
		The module is able to load values in hash table at startup upon
		providing a DB URL and table name.
		</para>
		<para>
			The structure of the table must contain:
		</para>
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>key name</emphasis> - string containing the name of
				the key.
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>key type</emphasis> - the type of the key
			</para>
			<itemizedlist>
				<listitem>
				<para>
					<emphasis>0</emphasis> - simple key - the key is added
					as 'key_name'.
				</para>
				</listitem>
				<listitem>
				<para>
					<emphasis>1</emphasis> - array key - the key is added
					as 'key_name[n]'. n is incremented for each key with this
					name to build an array in hash table.
				</para>
				</listitem>
			</itemizedlist>
			</listitem>
			<listitem>
			<para>
				<emphasis>value type</emphasis> - the type of the key value
			</para>
			<itemizedlist>
				<listitem>
				<para>
					<emphasis>0</emphasis> - value is string.
				</para>
				</listitem>
				<listitem>
				<para>
					<emphasis>1</emphasis> - value is integer.
				</para>
				</listitem>
			</itemizedlist>
			</listitem>
			<listitem>
			<para>
				<emphasis>key value</emphasis> - string containing the value of
				the key.
			</para>
			</listitem>
			</itemizedlist>
	</section>

	</section>
	<section>
	<title>Exported Parameters</title>
	<section>
		<title><varname>hash_size</varname> (integer)</title>
		<para>
		The hash table will be build with 2^hash_size entries.
		</para>
		<para>
		<emphasis>
			Default value is 6. Max value is 14.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>hash_size</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("htable", "hash_size", 10)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>db_url</varname> (str)</title>
		<para>
			The URL to connect to database for loading values in hash
			table at start up.
		</para>
		<para>
		<emphasis>
			Default value is NULL (do not connect).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_url</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("htable", "db_url", "mysql://openser:openserrw@localhost/openser")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>db_table</varname> (str)</title>
		<para>
			The DB table name to load values from it in hash
			table at start up.
		</para>
		<para>
		<emphasis>
			Default value is NULL (do not load).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>db_table</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("htable", "db_url", "htable")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>key_name_column</varname> (str)</title>
		<para>
			The name of the column containing hash table key name.
		</para>
		<para>
		<emphasis>
			Default value is 'key_name'.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>key_name</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("htable", "key_name_column", "kname")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>key_type_column</varname> (str)</title>
		<para>
			The name of the column containing hash table key type.
		</para>
		<para>
		<emphasis>
			Default value is 'key_type'.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>key_name</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("htable", "key_type_column", "ktype")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>value_type_column</varname> (str)</title>
		<para>
			The name of the column containing hash table value type.
		</para>
		<para>
		<emphasis>
			Default value is 'value_type'.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>value_type</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("htable", "value_type", "vtype")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>key_value_column</varname> (str)</title>
		<para>
			The name of the column containing hash table key value.
		</para>
		<para>
		<emphasis>
			Default value is 'key_value'.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>key_value</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("htable", "key_value", "kvalue")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>array_size_suffix</varname> (str)</title>
		<para>
			The suffix to be added to store the number of items in an
			array.
		</para>
		<para>
		<emphasis>
			Default value is '::size'.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>array_size_suffix</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("htable", "array_size_suffix", "-count")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>fetch_rows</varname> (integer)</title>
		<para>
		How many rows to fetch at once from database.
		</para>
		<para>
		<emphasis>
			Default value is 100.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>fetch_rows</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("htable", "fetch_rows", 1000)
...
</programlisting>
		</example>
	</section>
	</section>
	<section>
	<title>Exported Functions</title>
	<section>
		<title>
		<function moreinfo="none">sht_print()</function>
		</title>
		<para>
			Dump content of hash table to L_ERR log level. Intended for debug
			purposes.
		</para>
		<para>
			This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
			ONREPLY_ROUTE, BRANCH_ROUTE.
		</para>
		<example>
		<title><function>sht_print</function> usage</title>
		<programlisting format="linespecific">
...
sht_print();
...
</programlisting>
		</example>
	</section>
	</section>
	<section>
	<title>Exported pseudo-variables</title>
		
		<section>
			<title><varname>$sht(name)</varname></title>
			<para>
				Access hash table entries.
			</para>
			<para>
			The <quote>name</quote> can be:
			</para>
			<itemizedlist>
				<listitem>
				<para><emphasis>static string</emphasis> - set of characters
				without pseudo-variables</para>
				</listitem>	  
				<listitem>
				<para><emphasis>dynamic string</emphasis> - set of characters
				that include pseudo-variables. The pseudo-variables will be
				evaluated at runtime.</para>
				</listitem>	  
			</itemizedlist>

			<example>
				<title><function moreinfo="none">$sht(name)</function> usage</title>
				<programlisting format="linespecific">
...
$sht($au) = 1;
$sht($ru) = $fu;
...
				 </programlisting>
			</example>
	</section>
	</section>
</chapter>

