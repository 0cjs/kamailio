<?xml version="1.0" encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!-- Include general documentation entities -->
<!ENTITY % docentities SYSTEM "../../../docbook/entities.xml">
%docentities;

]>
<!-- Module User's Guide -->

<chapter>
	
	<title>&adminguide;</title>
	
	<section>
	<title>Overview</title>
	<para>
		This module provides a basic HTTP server functionaly inside SIP
		server. SIP and HTTP are very similar protocols, practically the
		SIP parser can handle easy HTTP requests just by adding a fake
		Via header.
	</para>
	<para>
		The xmlrpc module uses the same concept. xHTTP module offers a
		generic HTTP handling way, by calling event_route[xhttp:request]
		in your config. You can check the HTTP URI via config variable
		$hu. Note that $ru will rise errors since URO is not valid for SIP.
	</para>
	</section>
	<section>
	<title>Dependencies</title>
	<section>
		<title>&kamailio; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>sl</emphasis> - stateless reply.
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before running
		&kamailio; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>None</emphasis>
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>
	<section>
	<title>Exported Parameters</title>
	<section>
		<title><varname>url_match</varname> (str)</title>
		<para>
			Regular expression to match the HTPP URL. If there is no match,
			then event route is not executed
		</para>
		<para>
		<emphasis>
			Default value is null (match everything).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>url_match</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("xhttp", "url_match", "^/sip/")
...
</programlisting>
		</example>
	</section>
	</section>

	<section>
	<title>Exported Functions</title>
 	<section>
	    <title>
		<function moreinfo="none">xhttp_reply(code, reason, ctype, body)</function>
	    </title>
	    <para>
		Send back a reply with content-type and body.
	    </para>
		<example>
		<title><function>xhttp_reply</function> usage</title>
		<programlisting format="linespecific">
...
event_route[xhttp:request] {
    xhttp_reply("200", "OK", "text/html",
        "&lt;html&gt;&lt;body&gt;OK - [$si:$sp]&lt;/body&gt;&lt;/html&gt;");
}
...
</programlisting>
	    </example>
	</section>
	</section>
</chapter>

