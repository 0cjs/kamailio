<?xml version="1.0" encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!-- Include general documentation entities -->
<!ENTITY % docentities SYSTEM "../../../docbook/entities.xml">
%docentities;

]>
<!-- Module User's Guide -->

<chapter>
	
	<title>&adminguide;</title>
	
	<section>
	<title>Overview</title>
	<para>
		This module pushes event details to remote applications, via TCP.
	</para>
	</section>

	<section>
	<title>Dependencies</title>
	<section>
		<title>&kamailio; Modules</title>
		<para>
		The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>tm</emphasis> - (optional) needed only by
				evapi_async_relay()
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>External Libraries or Applications</title>
		<para>
		The following libraries or applications must be installed before running
		&kamailio; with this module loaded:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>libev</emphasis>
			</para>
			</listitem>
			</itemizedlist>
		</para>
	</section>
	</section>
	<section>
	<title>Parameters</title>
	<section>
		<title><varname>workers</varname> (int)</title>
		<para>
			Number of worker processes to be started to handle incoming messages
			from remote applications.
		</para>
		<para>
		<emphasis>
			Default value is 1.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>workers</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("evapi", "workers", 2)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>bind_addr</varname> (str)</title>
		<para>
		Local IP and port to listen on for incoming TCP connections.
		</para>
		<para>
		<emphasis>
			Default value is "127.0.0.1:8448".
		</emphasis>
		</para>
		<example>
		<title>Set <varname>bind_addr</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("evapi", "bind_addr", "1.2.3.4:8228")
...
</programlisting>
		</example>
	</section>
	</section>

	<section>
	<title>Functions</title>
	<section id="evapi.f.evapi_relay">
	    <title>
		<function moreinfo="none">evapi_relay(evdata)</function>
	    </title>
	    <para>
		Relay the event data give as parameter to connected applications.
		The format on the network is netstring with evdata payload.
		</para>
		<para>
		This function can be used from ANY_ROUTE.
		</para>
		<example>
		<title><function>evapi_relay</function> usage</title>
		<programlisting format="linespecific">
...
evapi_relay("{ \"event\": \"test\",\n \"data\": { \"fU\": \"$fU\" }\n}");
...
</programlisting>
	    </example>
		<para>
		The above exaple will send the following message over tcp:
		</para>
		<example>
		<title>TCP message</title>
		<programlisting format="linespecific">
...
47:{
 "event": "test",
 "data": { "fU": "test" }
},
...
</programlisting>
	    </example>
	</section>

	<section id="evapi.f.evapi_async_relay">
	    <title>
		<function moreinfo="none">evapi_async_relay(evdata)</function>
	    </title>
	    <para>
		Relay the event data give as parameter to connected applications.
		The format on the network is netstring with evdata payload. Before
		evaluating the parameter, the request processing is suspended using
		tm module.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>evapi_async_relay</function> usage</title>
		<programlisting format="linespecific">
...
evapi_relay("{ \"event\": \"suspend\",\n \"data\":"
        " { \"index\": \"$T(id_index)\", \"label\": \"$T(id_label)\" }\n}");
...
</programlisting>
	    </example>
	</section>

	</section>
</chapter>

